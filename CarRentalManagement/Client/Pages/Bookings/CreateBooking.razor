@page "/bookings/create"

@inject HttpClient _httpClient
@inject NavigationManager _navigationManager

<h3>CreateBooking</h3>
<hr />
<br />

<EditForm Model="@_booking" OnValidSubmit="CreateNewBooking">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    
    <div class="form-group">
        <label>Vehicle:</label>
        <div>
            <InputSelect @bind-Value="_booking.VehicleId" class="form-control">
                <option value="">-- Select Vehicle --</option>
                @if (_vehicles != null)
                {
                    foreach (var vehicle in _vehicles)
                    {
                        <option value="@vehicle.Id">@vehicle.Make.Name - @vehicle.Model.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => _booking.VehicleId)"></ValidationMessage>
        </div>
    </div>
    
    <div class="form-group">
        <label>Vehicle:</label>
        <div>
            <InputSelect @bind-Value="_booking.CustomerId" class="form-control">
                <option value="">-- Select Customer --</option>
                @if (_customers != null)
                {
                    foreach (var customer in _customers)
                    {
                        <option value="@customer.Id">@customer.EmailAddress</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => _booking.CustomerId)"></ValidationMessage>
        </div>
    </div>
    
    <div>
        <label>Date Out:</label>
        <div>
            <InputDate @bind-Value="_booking.DateOut" class="form-control">
                <option value="@DateTime.Now.ToString("yyyy MMMM dd")"></option>
            </InputDate>
            <ValidationMessage For="@(() => _booking.DateOut)"></ValidationMessage>
        </div>
    </div>
    <br />

    <button type="submit" class="btn btn-success btn-block">Create Booking</button>

</EditForm>


@code {

    private Booking _booking = new Booking
    {
        DateOut = DateTime.Now.Date
    };

    private List<Vehicle> _vehicles = new List<Vehicle>();
    private List<Customer> _customers = new List<Customer>();

    protected async override Task OnInitializedAsync()
    {
        _vehicles = await _httpClient.GetFromJsonAsync<List<Vehicle>>(Endpoints.VehiclesEndpoint);
        _customers = await _httpClient.GetFromJsonAsync<List<Customer>>(Endpoints.CustomersEndpoint);
    }


    private async Task CreateNewBooking()
    {
        await _httpClient.PostAsJsonAsync(Endpoints.BookingsEndpoint, _booking);
        _navigationManager.NavigateTo("/bookings");
    }

}