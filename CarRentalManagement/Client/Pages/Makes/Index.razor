@page "/makes/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using CarRentalManagement.Shared
@attribute [Authorize]
@inject HttpClient _httpClient
@inject IJSRuntime _js


<h3 class="card-title">Car Makes</h3>
<hr />
<br />

@if (Makes == null)
{
    <div class="alert alert-info">Loading Makes ... </div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var make in Makes)
            {
                <tr>
                    <td>@make.Name</td>
                    <td>
                        <a href="/makes/view/@make.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/makes/edit/@make.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(make.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private List<Make> Makes;

    protected override async Task OnInitializedAsync()
    {
        Makes = await _httpClient.GetFromJsonAsync<List<Make>>("api/makes");
    }

    async void Delete(int makeId)
    {
        var make = Makes.First(q => q.Id == makeId);

        if (!await _js.InvokeAsync<bool>("confirm", $"Do you want to delete {make.Name}")) return;
        await _httpClient.DeleteAsync($"api/makes/{makeId}");
        await OnInitializedAsync();
    }
}
