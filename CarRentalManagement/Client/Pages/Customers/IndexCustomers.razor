@page "/customers/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using CarRentalManagement.Shared
@using CarRentalManagement.Client.Static
@attribute [Authorize]
@inject HttpClient _httpClient
@inject IJSRuntime _js


<h3 class="card-title">Car Customers</h3>
<hr />
<br />

@if (_customers == null)
{
    <div class="alert alert-info">Loading Customers ... </div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Email Address</th>
                <th>Address</th>
                <th>Contact Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var customer in _customers)
        {
            <tr>
                <td>@customer.EmailAddress</td>
                <td>@customer.Address</td>
                <td>@customer.ContactNumber</td>
                <td>
                    <a href="/customers/view/@customer.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/customers/edit/@customer.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(() => Delete(customer.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}



@code {
    private List<Customer> _customers;

    protected override async Task OnInitializedAsync()
    {
        _customers = await _httpClient.GetFromJsonAsync<List<Customer>>(Endpoints.CustomersEndpoint);
    }

    async void Delete(int customerId)
    {
        var customer = _customers.First(q => q.Id == customerId);

        if (!await _js.InvokeAsync<bool>("confirm", $"Do you want to delete {customer.EmailAddress}")) return;
        await _httpClient.DeleteAsync($"{Endpoints.CustomersEndpoint}/{customerId}");
        await OnInitializedAsync();
    }
}